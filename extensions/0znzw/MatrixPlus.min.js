/**!
 * MicroBit-Matrix+
 * @author 0znzw <meow@miyo.lol> (@link https://scratch.mit.edu/users/0znzw/)
 * @version 1.0
 * @license MIT AND LGPL-3.0
 * Do not remove this comment
 */
!function(t){"use strict";if(!t.extensions.unsandboxed)throw new Error('"MicroBit_Matrix+" extension must be ran unsandboxed.');t.extensions.register(new class{getInfo(){return{id:"MatrixPlus0znzw",name:"Microbit Matrix+",blocks:[{blockType:t.BlockType.BOOLEAN,opcode:"matrixValidator",text:"is binary [MATRIX] a valid matrix?",arguments:{MATRIX:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.MATRIX}}},{blockType:t.BlockType.REPORTER,opcode:"matrixCoupler",text:"[A]",arguments:{A:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.MATRIX}}},{blockType:t.BlockType.REPORTER,opcode:"quadMatrixCoupler",text:["[A] [B]","[C] [D]"],arguments:{A:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.MATRIX},B:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.MATRIX},C:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.MATRIX},D:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.MATRIX}}},{blockType:t.BlockType.REPORTER,opcode:"getMicrobitMatrix",text:"get matrix number [NUMBER] out of binary [MATRIX]",arguments:{NUMBER:{defaultValue:1,type:t.ArgumentType.NUMBER},MATRIX:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.STRING}}},{blockType:t.BlockType.REPORTER,opcode:"getDigitAt",text:"get pixel at row [ROW] and collum [COLLUM] of matrix [MATRIX]",arguments:{ROW:{defaultValue:3,type:t.ArgumentType.NUMBER},COLLUM:{defaultValue:5,type:t.ArgumentType.NUMBER},MATRIX:{defaultValue:"0101010101100010101000100",type:t.ArgumentType.MATRIX}}}]}}matrixValidator({MATRIX:e},r){return!((e=t.Cast.toString(e)).length<25||e.length%25!=0)&&""===e.replace(/[01]/g,"")}matrixCoupler({A:e},r){return t.Cast.toString(e)}quadMatrixCoupler({A:e,B:r,C:a,D:u},o){return`${t.Cast.toString(e)}${t.Cast.toString(r)}${t.Cast.toString(a)}${t.Cast.toString(u)}`}getMicrobitMatrix({NUMBER:e,MATRIX:r},a){return e=Math.round(t.Cast.toNumber(e)),(r=t.Cast.toString(r)).slice(25*(e-1),25*(e-1)+25)}getDigitAt({ROW:e,COLLUM:r,MATRIX:a},u){return e=(e=Math.round(t.Cast.toNumber(e)))<1?1:e>5?5:e,r=(r=Math.round(t.Cast.toNumber(r)))<1?1:r>5?5:r,(a=t.Cast.toString(a)).charAt(5*(e-1)+(r-1))}})}(Scratch);