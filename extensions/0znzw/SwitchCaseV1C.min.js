/**!
 * Switch Case Compiled
 * @author 0znzw <meow@miyo.lol> (@link https://scratch.mit.edu/users/0znzw/)
 * @version 1.2
 * @license MIT AND LGPL-3.0
 * Do not remove this comment
 * 
 * pls dont use this, its very bad :3 use my new one
 */
!function(e){"use strict";if(!e.extensions.unsandboxed)throw new Error('"Switch Case v1c" needs to be ran unsandboxed.');const t=e.vm,s=t.runtime;class c{constructor(e){this.isLoop=e,this.isLastBlock=!1}}const n=t.exports.i_will_not_ask_for_help_when_these_break().JSGenerator,o=t.exports.i_will_not_ask_for_help_when_these_break().ScriptTreeGenerator,r=n.prototype,a=o.prototype,i="0zSwCc",u=(e,t)=>{if(!e[i]){e[i]={};for(const s in t){const c=e[s];e[i][s]=e[s],e[s]=c?function(...e){return t[s].call(this,((...e)=>c.call(this,...e)),...e)}:function(...e){return t[s].call(this,(()=>{}),...e)}}}};function l(e){return"string"==typeof e?`"${t=e,"string"!=typeof t&&(console.warn("sanitize got unexpected type: "+typeof t),t=""+t),JSON.stringify(t).slice(1,-1)}"`:("number"==typeof e||console.warn(`sanitization failed on case of type: ${typeof e}, casting to string`),String(e));var t}function d(e,t){let s=this.descendInput(e),c=!1;if(s.constantValue?.value)return t(s.constantValue.value);if(s=this.descendInput(s.constantValue),s.constantValue?.value)return t(s.constantValue.value);if(c=!0,s?.source??s?.constantValue?.source)return s?.source??s?.constantValue?.source;throw new Error("Unable to descend input")}u(r,{descendStackedBlock(e,t){switch(console.log(this,t),t.kind){case"0zSwCc.switch":const s=d.call(this,t.case,l),n=this.source??"";this.descendStack(t.code,new c(!1,t.type));const o=this.source.substring(n.length);return this.source=n,void(this.source+=`\nswitch(${s}) {\n${o}\n}\n`);case"0zSwCc.case":const r=d.call(this,t.case,l),a=this.source??"";this.descendStack(t.code,new c(!1,t.type));const i=this.source.substring(a.length);return this.source=a,void(this.source+=`case ${r}:\n${i}\n`);case"0zSwCc.default":const u=this.source??"";this.descendStack(t.code,new c(!1,t.type));const h=this.source.substring(u.length);return this.source=u,void(this.source+=`default:\n${h}\n`);case"0zSwCc.break":return void(this.source+="\nbreak;");default:return e(t)}}}),u(a,{descendStackedBlock(e,t){switch(t.opcode){case"0zSwCc_switch_":return{kind:"0zSwCc.switch",case:{kind:"constant",value:this.descendInputOfBlock(t,"C")},code:this.descendSubstack(t,"SUBSTACK")};case"0zSwCc_case_":return{kind:"0zSwCc.case",case:{kind:"constant",value:this.descendInputOfBlock(t,"C")},code:this.descendSubstack(t,"SUBSTACK")};case"0zSwCc_default_":return{kind:"0zSwCc.default",code:this.descendSubstack(t,"SUBSTACK")};case"0zSwCc_break_":return{kind:"0zSwCc.break"};default:return e(t)}}}),e.extensions.register(new class{getInfo(){return{id:"0zSwCc",name:"Switch Case (Compiler)",blocks:[{opcode:"switch_",func:"err",text:"switch [C]",blockType:e.BlockType.CONDITIONAL,arguments:{C:{type:e.ArgumentType.STRING,defaultValue:"apple"}}},{opcode:"case_",func:"err",text:"case [C]",blockType:e.BlockType.CONDITIONAL,arguments:{C:{type:e.ArgumentType.STRING,defaultValue:"apple"}}},{opcode:"default_",func:"err",text:"default",blockType:e.BlockType.CONDITIONAL,isTerminal:!0},{opcode:"break_",func:"err",text:"break",blockType:e.BlockType.COMMAND,isTerminal:!0}]}}err(e,t,c){const n="This version of switch case only works in the compiler :trol:";return s.visualReport(t.thread.isCompiled?t.thread.peekStack():t.thread.peekStackFrame().op.id,n),n}switch_(){}case_(){}defaut_(){}break_(){}})}(Scratch);