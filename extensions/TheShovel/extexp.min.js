/**!
 * Extension Exposer
 * @author TheShovel (@link https://github.com/TheShovel/)
 * @author 0znzw <meow@miyo.lol> (@link https://scratch.mit.edu/users/0znzw/)
 * @version 1.3
 * @license MIT AND LGPL-3.0
 * @comment Thanks to TheShovel for the original code, I just updated some internals :3
 * Do not remove this comment
 */
!function(e){if(!e.extensions.unsandboxed)throw new Error('"Extension Exposer" must be ran unsandboxed.');const{Cast:r,BlockType:t,ArgumentType:n,vm:o}=e,{runtime:s}=o,u="jodieextexp",a="run function [FUNCNAME] from [EXTLIST] with inputs [INPUT]",i={FUNCNAME:{type:n.STRING,defaultValue:"test"},EXTLIST:{type:n.STRING,menu:"EXTLIST",defaultValue:u},INPUT:{type:n.STRING,defaultValue:'{"INPUT":"Hello World!"}'}};e.extensions.register(s[`ext_${u}`]=new class{getInfo(){return{id:u,name:"Extension Exposer",blocks:[{func:"run",opcode:"runcommand",blockType:t.COMMAND,text:a,arguments:i},{func:"run",opcode:"runreporter",blockType:t.REPORTER,text:a,arguments:i,allowDropAnywhere:!0},{func:"run",opcode:"runboolean",blockType:t.BOOLEAN,text:a,arguments:i,allowDropAnywhere:!0}],menus:{EXTLIST:{acceptReporters:!0,acceptText:!0,items:"_extensions"}}}}_parseJSON(e){if(Array.isArray(e))return{};if("object"==typeof e)return e;try{return e=JSON.parse(e),Array.isArray(e)?{}:"object"==typeof e?e:{}}catch{return{}}}_extensions(){const e=Array.from(o.extensionManager._loadedExtensions.keys());return"string"!=typeof e[0]&&e.push(""),e}test(e){return r.toString(e.INPUT||"")}run({FUNCNAME:e,EXTLIST:t,INPUT:n},o,u){return t=r.toString(t),e=r.toString(e),(s._primitives[`${t}_${e}`]||s[`ext_${t}`][e])(this._parseJSON(r.toString(n)),o,u)}runcommand(){}runreporter(){}runboolean(){}})}(Scratch);